// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mintel/atlassian-automator/pkg/confluenceclient (interfaces: Client)

// Package mock_confluenceclient is a generated GoMock package.
package mock_confluenceclient

import (
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	goconfluence "github.com/virtomize/confluence-go-api"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddLabels mocks base method.
func (m *MockClient) AddLabels(arg0 string, arg1 *[]goconfluence.Label) (*goconfluence.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabels", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLabels indicates an expected call of AddLabels.
func (mr *MockClientMockRecorder) AddLabels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabels", reflect.TypeOf((*MockClient)(nil).AddLabels), arg0, arg1)
}

// AnonymousUser mocks base method.
func (m *MockClient) AnonymousUser() (*goconfluence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnonymousUser")
	ret0, _ := ret[0].(*goconfluence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnonymousUser indicates an expected call of AnonymousUser.
func (mr *MockClientMockRecorder) AnonymousUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnonymousUser", reflect.TypeOf((*MockClient)(nil).AnonymousUser))
}

// Auth mocks base method.
func (m *MockClient) Auth(arg0 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Auth", arg0)
}

// Auth indicates an expected call of Auth.
func (mr *MockClientMockRecorder) Auth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClient)(nil).Auth), arg0)
}

// CreateContent mocks base method.
func (m *MockClient) CreateContent(arg0 *goconfluence.Content) (*goconfluence.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", arg0)
	ret0, _ := ret[0].(*goconfluence.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockClientMockRecorder) CreateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockClient)(nil).CreateContent), arg0)
}

// CurrentUser mocks base method.
func (m *MockClient) CurrentUser() (*goconfluence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser")
	ret0, _ := ret[0].(*goconfluence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockClientMockRecorder) CurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockClient)(nil).CurrentUser))
}

// DelContent mocks base method.
func (m *MockClient) DelContent(arg0 string) (*goconfluence.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelContent", arg0)
	ret0, _ := ret[0].(*goconfluence.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelContent indicates an expected call of DelContent.
func (mr *MockClientMockRecorder) DelContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelContent", reflect.TypeOf((*MockClient)(nil).DelContent), arg0)
}

// DeleteLabel mocks base method.
func (m *MockClient) DeleteLabel(arg0, arg1 string) (*goconfluence.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockClientMockRecorder) DeleteLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockClient)(nil).DeleteLabel), arg0, arg1)
}

// GetAllSpaces mocks base method.
func (m *MockClient) GetAllSpaces(arg0 goconfluence.AllSpacesQuery) (*goconfluence.AllSpaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpaces", arg0)
	ret0, _ := ret[0].(*goconfluence.AllSpaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpaces indicates an expected call of GetAllSpaces.
func (mr *MockClientMockRecorder) GetAllSpaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpaces", reflect.TypeOf((*MockClient)(nil).GetAllSpaces), arg0)
}

// GetAttachments mocks base method.
func (m *MockClient) GetAttachments(arg0 string) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachments", arg0)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachments indicates an expected call of GetAttachments.
func (mr *MockClientMockRecorder) GetAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachments", reflect.TypeOf((*MockClient)(nil).GetAttachments), arg0)
}

// GetBlueprintTemplates mocks base method.
func (m *MockClient) GetBlueprintTemplates(arg0 goconfluence.TemplateQuery) (*goconfluence.TemplateSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintTemplates", arg0)
	ret0, _ := ret[0].(*goconfluence.TemplateSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintTemplates indicates an expected call of GetBlueprintTemplates.
func (mr *MockClientMockRecorder) GetBlueprintTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintTemplates", reflect.TypeOf((*MockClient)(nil).GetBlueprintTemplates), arg0)
}

// GetChildPages mocks base method.
func (m *MockClient) GetChildPages(arg0 string) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildPages", arg0)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildPages indicates an expected call of GetChildPages.
func (mr *MockClientMockRecorder) GetChildPages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildPages", reflect.TypeOf((*MockClient)(nil).GetChildPages), arg0)
}

// GetComments mocks base method.
func (m *MockClient) GetComments(arg0 string) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockClientMockRecorder) GetComments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockClient)(nil).GetComments), arg0)
}

// GetContent mocks base method.
func (m *MockClient) GetContent(arg0 goconfluence.ContentQuery) (*goconfluence.ContentSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0)
	ret0, _ := ret[0].(*goconfluence.ContentSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockClientMockRecorder) GetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockClient)(nil).GetContent), arg0)
}

// GetContentByID mocks base method.
func (m *MockClient) GetContentByID(arg0 string, arg1 goconfluence.ContentQuery) (*goconfluence.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockClientMockRecorder) GetContentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockClient)(nil).GetContentByID), arg0, arg1)
}

// GetContentTemplates mocks base method.
func (m *MockClient) GetContentTemplates(arg0 goconfluence.TemplateQuery) (*goconfluence.TemplateSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentTemplates", arg0)
	ret0, _ := ret[0].(*goconfluence.TemplateSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentTemplates indicates an expected call of GetContentTemplates.
func (mr *MockClientMockRecorder) GetContentTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentTemplates", reflect.TypeOf((*MockClient)(nil).GetContentTemplates), arg0)
}

// GetContentVersion mocks base method.
func (m *MockClient) GetContentVersion(arg0 string) (*goconfluence.ContentVersionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentVersion", arg0)
	ret0, _ := ret[0].(*goconfluence.ContentVersionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentVersion indicates an expected call of GetContentVersion.
func (mr *MockClientMockRecorder) GetContentVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentVersion", reflect.TypeOf((*MockClient)(nil).GetContentVersion), arg0)
}

// GetHistory mocks base method.
func (m *MockClient) GetHistory(arg0 string) (*goconfluence.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0)
	ret0, _ := ret[0].(*goconfluence.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockClientMockRecorder) GetHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockClient)(nil).GetHistory), arg0)
}

// GetLabels mocks base method.
func (m *MockClient) GetLabels(arg0 string) (*goconfluence.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0)
	ret0, _ := ret[0].(*goconfluence.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockClientMockRecorder) GetLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockClient)(nil).GetLabels), arg0)
}

// GetWatchers mocks base method.
func (m *MockClient) GetWatchers(arg0 string) (*goconfluence.Watchers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchers", arg0)
	ret0, _ := ret[0].(*goconfluence.Watchers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchers indicates an expected call of GetWatchers.
func (mr *MockClientMockRecorder) GetWatchers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchers", reflect.TypeOf((*MockClient)(nil).GetWatchers), arg0)
}

// Request mocks base method.
func (m *MockClient) Request(arg0 *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockClientMockRecorder) Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockClient)(nil).Request), arg0)
}

// Search mocks base method.
func (m *MockClient) Search(arg0 goconfluence.SearchQuery) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), arg0)
}

// SendAllSpacesRequest mocks base method.
func (m *MockClient) SendAllSpacesRequest(arg0 *url.URL, arg1 string) (*goconfluence.AllSpaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAllSpacesRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.AllSpaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAllSpacesRequest indicates an expected call of SendAllSpacesRequest.
func (mr *MockClientMockRecorder) SendAllSpacesRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAllSpacesRequest", reflect.TypeOf((*MockClient)(nil).SendAllSpacesRequest), arg0, arg1)
}

// SendContentAttachmentRequest mocks base method.
func (m *MockClient) SendContentAttachmentRequest(arg0 *url.URL, arg1 string, arg2 io.Reader, arg3 map[string]string) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendContentAttachmentRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendContentAttachmentRequest indicates an expected call of SendContentAttachmentRequest.
func (mr *MockClientMockRecorder) SendContentAttachmentRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendContentAttachmentRequest", reflect.TypeOf((*MockClient)(nil).SendContentAttachmentRequest), arg0, arg1, arg2, arg3)
}

// SendContentRequest mocks base method.
func (m *MockClient) SendContentRequest(arg0 *url.URL, arg1 string, arg2 *goconfluence.Content) (*goconfluence.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendContentRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*goconfluence.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendContentRequest indicates an expected call of SendContentRequest.
func (mr *MockClientMockRecorder) SendContentRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendContentRequest", reflect.TypeOf((*MockClient)(nil).SendContentRequest), arg0, arg1, arg2)
}

// SendContentVersionRequest mocks base method.
func (m *MockClient) SendContentVersionRequest(arg0 *url.URL, arg1 string) (*goconfluence.ContentVersionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendContentVersionRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.ContentVersionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendContentVersionRequest indicates an expected call of SendContentVersionRequest.
func (mr *MockClientMockRecorder) SendContentVersionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendContentVersionRequest", reflect.TypeOf((*MockClient)(nil).SendContentVersionRequest), arg0, arg1)
}

// SendHistoryRequest mocks base method.
func (m *MockClient) SendHistoryRequest(arg0 *url.URL, arg1 string) (*goconfluence.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHistoryRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendHistoryRequest indicates an expected call of SendHistoryRequest.
func (mr *MockClientMockRecorder) SendHistoryRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHistoryRequest", reflect.TypeOf((*MockClient)(nil).SendHistoryRequest), arg0, arg1)
}

// SendLabelRequest mocks base method.
func (m *MockClient) SendLabelRequest(arg0 *url.URL, arg1 string, arg2 *[]goconfluence.Label) (*goconfluence.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLabelRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*goconfluence.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLabelRequest indicates an expected call of SendLabelRequest.
func (mr *MockClientMockRecorder) SendLabelRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLabelRequest", reflect.TypeOf((*MockClient)(nil).SendLabelRequest), arg0, arg1, arg2)
}

// SendSearchRequest mocks base method.
func (m *MockClient) SendSearchRequest(arg0 *url.URL, arg1 string) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSearchRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSearchRequest indicates an expected call of SendSearchRequest.
func (mr *MockClientMockRecorder) SendSearchRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSearchRequest", reflect.TypeOf((*MockClient)(nil).SendSearchRequest), arg0, arg1)
}

// SendUserRequest mocks base method.
func (m *MockClient) SendUserRequest(arg0 *url.URL, arg1 string) (*goconfluence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUserRequest indicates an expected call of SendUserRequest.
func (mr *MockClientMockRecorder) SendUserRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserRequest", reflect.TypeOf((*MockClient)(nil).SendUserRequest), arg0, arg1)
}

// SendWatcherRequest mocks base method.
func (m *MockClient) SendWatcherRequest(arg0 *url.URL, arg1 string) (*goconfluence.Watchers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWatcherRequest", arg0, arg1)
	ret0, _ := ret[0].(*goconfluence.Watchers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWatcherRequest indicates an expected call of SendWatcherRequest.
func (mr *MockClientMockRecorder) SendWatcherRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWatcherRequest", reflect.TypeOf((*MockClient)(nil).SendWatcherRequest), arg0, arg1)
}

// UpdateAttachment mocks base method.
func (m *MockClient) UpdateAttachment(arg0, arg1, arg2 string, arg3 io.Reader) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttachment indicates an expected call of UpdateAttachment.
func (mr *MockClientMockRecorder) UpdateAttachment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachment", reflect.TypeOf((*MockClient)(nil).UpdateAttachment), arg0, arg1, arg2, arg3)
}

// UpdateContent mocks base method.
func (m *MockClient) UpdateContent(arg0 *goconfluence.Content) (*goconfluence.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", arg0)
	ret0, _ := ret[0].(*goconfluence.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockClientMockRecorder) UpdateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockClient)(nil).UpdateContent), arg0)
}

// UploadAttachment mocks base method.
func (m *MockClient) UploadAttachment(arg0, arg1 string, arg2 io.Reader) (*goconfluence.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttachment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*goconfluence.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAttachment indicates an expected call of UploadAttachment.
func (mr *MockClientMockRecorder) UploadAttachment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttachment", reflect.TypeOf((*MockClient)(nil).UploadAttachment), arg0, arg1, arg2)
}

// User mocks base method.
func (m *MockClient) User(arg0 string) (*goconfluence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(*goconfluence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockClientMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User), arg0)
}

// VerifyTLS mocks base method.
func (m *MockClient) VerifyTLS(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyTLS", arg0)
}

// VerifyTLS indicates an expected call of VerifyTLS.
func (mr *MockClientMockRecorder) VerifyTLS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTLS", reflect.TypeOf((*MockClient)(nil).VerifyTLS), arg0)
}
